//
//-----------------------------------------------------------------------
// Click Script Generated by click-mkclgw.pl
//
//    sex dez 15 18:52:37 -02 2017
//-----------------------------------------------------------------------
//

//
// CLGW::Output::addr_info
//
AddressInfo(
	intern	10.0.0.1	10.0.0.0/17	00:07:e9:5d:79:51,
	extern	77.59.77.4	77.59.77.0/26	00:07:e9:5d:79:52,
	extern_next_hop	00:01:30:88:cd:00,
	dns_int	10.0.12.20,
	foo_net	10.0.30.1	10.0.30.0/24,
	foo_ext	77.59.77.40,
	stage0_int	10.0.10.10,
	stage0_ext	77.59.77.20,
	stage1_int	10.0.10.11,
	stage1_ext	77.59.77.21,
	stage2_int	10.0.10.12,
	stage2_ext	77.59.77.22,
	stage3_int	10.0.10.13,
	stage3_ext	77.59.77.23,
	stage4_int	10.0.10.9,
	stage4_ext	77.59.77.19,
	grave_int	10.0.10.14,
	grave_ext	77.59.77.14,
	ws_net	10.0.11.1	10.0.11.0/24,
	ws_ext	77.59.77.10,
	ws1	10.0.11.11,
	ws2	10.0.11.12,
	ws3	10.0.11.13,
	ws4	10.0.11.14,
	ws5	10.0.11.15,
	ws6	10.0.11.16,
	ws7	10.0.11.17,
	ws8	10.0.11.18,
	ws9	10.0.11.19,
	ws10	10.0.11.20,
	ws11	10.0.11.21,
	ws12	10.0.11.22,
	ws13	10.0.11.23,
	ws14	10.0.11.24
);

//
// CLGW::Output::lb_mappers
//
// Load Balancer for the 'ws' Cluster
ws_lb_mapper :: SourceIPHashMapper (

	// Params: Nodes per machine=129; Seed=0xbadbeef
	129 0xbadbeef,

	// Cluster Machine Entries
	- - ws1 - 1 0 1,
	- - ws4 - 1 0 4,
	- - ws8 - 1 0 8,
	- - ws9 - 1 0 9,
	- - ws10 - 1 0 10,
	- - ws11 - 1 0 11,
	- - ws12 - 1 0 12,
	- - ws13 - 1 0 13,
	- - ws14 - 1 0 14
);


//
// CLGW::Output::dev_setup
//

elementclass GatewayDevice {
  $device |
  from :: PollDevice($device)
	-> output;
  input -> q :: Queue(1024)
	-> to :: ToDevice($device);
  ScheduleInfo(from .1, to 1);
}

extern_dev :: GatewayDevice(extern:eth);
intern_dev :: GatewayDevice(intern:eth);

//
// CLGW::Output::host_setup
//

//
// ip_to_host: smacks a dummy ethernet header on this packet and
// sends it to the Host OS.
//
ip_to_host_int :: EtherEncap(0x0800, 1:1:1:1:1:1, intern)
	-> ToHost;

ip_to_host_ext :: EtherEncap(0x0800, 2:2:2:2:2:2, extern)
	-> ToHost;

//
// CLGW::Output::arp_machinery
//
// ARP MACHINERY
extern_arp_class, intern_arp_class
	:: Classifier(12/0806 20/0001, 12/0806 20/0002, 12/0800, -);
intern_arpq :: ARPQuerier(intern);

extern_dev -> extern_arp_class;

// other machines on the network are querying us for particular IPs
extern_arp_class[0] ->
    ARPResponder(extern:ip foo_ext:ip stage0_ext:ip stage1_ext:ip stage2_ext:ip stage3_ext:ip stage4_ext:ip grave_ext:ip ws_ext:ip extern:eth) ->
    extern_dev;
extern_arp_class[1] -> ToHost;			// ARP responses
extern_arp_class[3] -> Discard;

intern_dev -> intern_arp_class;
intern_arp_class[0] ->
	ARPResponder(intern:ip foo_net:ip ws_net:ip intern:eth) ->
	intern_dev;
intern_arp_class[1] -> intern_arpr_t :: Tee(2);
	intern_arpr_t[0] -> ToHost;
	intern_arpr_t[1] -> [1]intern_arpq;
intern_arp_class[3] -> Discard;
//
// CLGW::Output::output_path
//

// OUTPUT PATH
ip_to_extern :: GetIPAddress(16)
      -> CheckIPHeader
      -> EtherEncap(0x0800, extern:eth, extern_next_hop:eth)
      -> extern_dev;
ip_to_intern :: GetIPAddress(16)
      -> CheckIPHeader
      -> [0]intern_arpq
      -> intern_dev;

//
// CLGW::Output::ip_from_extern_classify
//
// IP-level classifications for packets coming in from outside world
ip_from_extern :: IPClassifier(
	dst host extern,
	dst host foo_ext,
	dst host stage0_ext,
	dst host stage1_ext,
	dst host stage2_ext,
	dst host stage3_ext,
	dst host stage4_ext,
	dst host grave_ext,
	dst host ws_ext,
	-);
ip_from_extern[9] -> Discard;

//
// CLGW::Output::tcp_from_extern_classify
//
gw_ip_from_extern :: IPClassifier(
	src tcp port ftp,
	tcp or udp,
	-
);
ip_from_extern[0] -> gw_ip_from_extern;

foo_ip_from_extern :: IPClassifier (
	src tcp port ftp,
	tcp or udp,
	-
);
ip_from_extern[1] -> foo_ip_from_extern;

stage0_ip_from_extern :: IPClassifier (
	dst tcp ssh or www,
	src tcp port ftp,
	tcp or udp,
	-
);
ip_from_extern[2] -> stage0_ip_from_extern;

stage1_ip_from_extern :: IPClassifier (
	dst tcp ssh or www,
	src tcp port ftp,
	tcp or udp,
	-
);
ip_from_extern[3] -> stage1_ip_from_extern;

stage2_ip_from_extern :: IPClassifier (
	dst tcp ssh or www,
	src tcp port ftp,
	tcp or udp,
	-
);
ip_from_extern[4] -> stage2_ip_from_extern;

stage3_ip_from_extern :: IPClassifier (
	dst tcp ssh or www,
	src tcp port ftp,
	tcp or udp,
	-
);
ip_from_extern[5] -> stage3_ip_from_extern;

stage4_ip_from_extern :: IPClassifier (
	dst tcp ssh or www,
	src tcp port ftp,
	tcp or udp,
	-
);
ip_from_extern[6] -> stage4_ip_from_extern;

grave_ip_from_extern :: IPClassifier (
	src tcp port ftp,
	tcp or udp,
	-
);
ip_from_extern[7] -> grave_ip_from_extern;

ws_ip_from_extern :: IPClassifier (
	dst tcp www,
	src tcp port ftp,
	tcp or udp,
	-
);
ip_from_extern[8] -> ws_ip_from_extern;

//
// CLGW::Output::from_ext_plumbing
//
extern_arp_class[2] -> Strip(14)
    -> CheckIPHeader
    -> ip_from_extern;

//
// CLGW::Output::rewriter_patterns
//
IPRewriterPatterns(
	gw_out extern 50000-65535 - -,
	dns_pat intern - dns_int -,
	foo_out foo_ext 50000-65535 - -,
	stage0_in - - stage0_int -,
	stage0_out stage0_ext - - -,
	stage1_in - - stage1_int -,
	stage1_out stage1_ext - - -,
	stage2_in - - stage2_int -,
	stage2_out stage2_ext - - -,
	stage3_in - - stage3_int -,
	stage3_out stage3_ext - - -,
	stage4_in - - stage4_int -,
	stage4_out stage4_ext - - -,
	grave_in - - grave_int -,
	grave_out grave_ext - - -,
	ws_out ws_ext 50000-65535 - -
);

//
// CLGW::Output::ip_rewriter
//
rw :: IPRewriter(
	pattern gw_out 0 1,
	pattern dns_pat 1 1,
	pattern foo_out 0 1,
	pattern stage0_out 0 1,
	pattern stage0_in 1 0,
	pattern stage1_out 0 1,
	pattern stage1_in 1 0,
	pattern stage2_out 0 1,
	pattern stage2_in 1 0,
	pattern stage3_out 0 1,
	pattern stage3_in 1 0,
	pattern stage4_out 0 1,
	pattern stage4_in 1 0,
	pattern grave_out 0 1,
	pattern grave_in 1 0,
	pattern ws_out 0 1,
	ws_lb_mapper,
	nochange 0,
	nochange 2,
	drop
);

//
// CLGW::Output::tcp_rewriter
//
// internal traffic -> outside world
tcp_rw :: TCPRewriter ( pattern gw_out 0 1,
			drop );

//
// CLGW::Output::rewriter_plumbing_generic
//
rw[0] -> ip_to_extern_class :: IPClassifier(dst host intern, -);
  ip_to_extern_class[0] -> ip_to_host_int;
  ip_to_extern_class[1] -> ip_to_extern;
rw[1] -> ip_to_intern;
rw[2] -> IPClassifier(dst host extern)
      -> ip_to_host_ext;

// tcp_rw is used only for FTP control traffic
tcp_rw[0] -> ip_to_extern;
tcp_rw[1] -> ip_to_intern;

//
// CLGW::Output::rewriter_plumbing
//
gw_ip_from_extern[0] -> [1]tcp_rw;            // FTP control traffic
gw_ip_from_extern[1] -> [18]rw;               // all TCP/UDP to GW
gw_ip_from_extern[2] -> Discard;              // discard everything else

foo_ip_from_extern[0] -> [1]tcp_rw;           // FTP control traffic
foo_ip_from_extern[1] -> [19]rw;              // rewrite or drop!
foo_ip_from_extern[2] -> Discard;             // non TCP/UDP

stage0_ip_from_extern[0] -> [4]rw;            // accepting incoming connections
stage0_ip_from_extern[1] -> [1]tcp_rw;        // FTP control traffic
stage0_ip_from_extern[2] -> [19]rw;           // rewrite or drop!
stage0_ip_from_extern[3] -> Discard;          // non TCP/UDP

stage1_ip_from_extern[0] -> [6]rw;            // accepting incoming connections
stage1_ip_from_extern[1] -> [1]tcp_rw;        // FTP control traffic
stage1_ip_from_extern[2] -> [19]rw;           // rewrite or drop!
stage1_ip_from_extern[3] -> Discard;          // non TCP/UDP

stage2_ip_from_extern[0] -> [8]rw;            // accepting incoming connections
stage2_ip_from_extern[1] -> [1]tcp_rw;        // FTP control traffic
stage2_ip_from_extern[2] -> [19]rw;           // rewrite or drop!
stage2_ip_from_extern[3] -> Discard;          // non TCP/UDP

stage3_ip_from_extern[0] -> [10]rw;           // accepting incoming connections
stage3_ip_from_extern[1] -> [1]tcp_rw;        // FTP control traffic
stage3_ip_from_extern[2] -> [19]rw;           // rewrite or drop!
stage3_ip_from_extern[3] -> Discard;          // non TCP/UDP

stage4_ip_from_extern[0] -> [12]rw;           // accepting incoming connections
stage4_ip_from_extern[1] -> [1]tcp_rw;        // FTP control traffic
stage4_ip_from_extern[2] -> [19]rw;           // rewrite or drop!
stage4_ip_from_extern[3] -> Discard;          // non TCP/UDP

grave_ip_from_extern[0] -> [1]tcp_rw;         // FTP control traffic
grave_ip_from_extern[1] -> [14]rw;            // BEWARE! No firewalling
grave_ip_from_extern[2] -> Discard;           // non TCP/UDP

ws_ip_from_extern[0] -> [16]rw;               // accepting incoming connections
ws_ip_from_extern[1] -> [1]tcp_rw;            // FTP control traffic
ws_ip_from_extern[2] -> [19]rw;               // rewrite or drop!
ws_ip_from_extern[3] -> Discard;              // non TCP/UDP

//
// CLGW::Output::from_int_ip_classify
//
// FILTER & REWRITE IP PACKETS FROM INSIDE

// Clasify by destination
ip_from_intern :: IPClassifier(dst host intern,
			       dst net intern,
			       dst tcp port ftp,
			       -);

//
// CLGW::Output::from_int_src_classify
//
ip_from_intern_src :: IPClassifier(
	src net foo_net:ipnet,
	src host stage0_int:ip,
	src host stage1_int:ip,
	src host stage2_int:ip,
	src host stage3_int:ip,
	src host stage4_int:ip,
	src host grave_int:ip,
	src net ws_net:ipnet,
	-
);

//
// CLGW::Output::from_int_gw_tcp_classify
//
// For GW, classify by TCP port
gw_ip_from_intern :: IPClassifier(
	dst tcp ssh,
	dst port dns,
	tcp or udp,
	-
);

//
// CLGW::Output::from_int_plumbing_generic
//
intern_arp_class[2] -> Strip(14)
  	-> CheckIPHeader
	-> ip_from_intern;

ip_from_intern[0] -> gw_ip_from_intern;
ip_from_intern[1] -> ip_to_host_int;          // net 10.X stuff, like broadcast
ip_from_intern[2] -> FTPPortMapper(tcp_rw, rw, gw_out 0 1)
		  -> [0]tcp_rw;              // FTP traffic
ip_from_intern[3] -> ip_from_intern_src;

//
// CLGW::Output::from_int_to_gw_plumbing
//
gw_ip_from_intern[0] -> ip_to_host_int;       // SSH to linux
gw_ip_from_intern[1] -> [1]rw;                // DNS to internal DNS
gw_ip_from_intern[2] -> [17]rw;               // send to linux via rw
gw_ip_from_intern[3] -> ip_to_host_int;       // non TCP/UDP to linux

//
// CLGW::Output::from_int_plumbing
//
ip_from_intern_src[0] -> [2]rw;
ip_from_intern_src[1] -> [3]rw;
ip_from_intern_src[2] -> [5]rw;
ip_from_intern_src[3] -> [7]rw;
ip_from_intern_src[4] -> [9]rw;
ip_from_intern_src[5] -> [11]rw;
ip_from_intern_src[6] -> [13]rw;
ip_from_intern_src[7] -> [15]rw;
ip_from_intern_src[8] -> [0]rw;               // Everything else through def
