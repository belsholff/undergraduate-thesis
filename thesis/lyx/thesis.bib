@inproceedings{morris_click_1999,
	address = {New York, NY, USA},
	series = {{SOSP} '99},
	title = {The {Click} {Modular} {Router}},
	isbn = {978-1-58113-140-6},
	url = {http://doi.acm.org/10.1145/319151.319166},
	doi = {10.1145/319151.319166},
	abstract = {Click is a new software architecture for building flexible and configurable routers. A Click router is assembled from packet processing modules called elements. Individual elements implement simple router functions like packet classification, queueing, scheduling, and interfacing with network devices. Complete configurations are built by connecting elements into a graph; packets flow along the graph's edges. Several features make individual elements more powerful and complex configurations easier to write, including pull processing, which models packet flow driven by transmitting interfaces, and flow-based router context, which helps an element locate other interesting elements.We demonstrate several working configurations, including an IP router and an Ethernet bridge. These configurations are modular---the IP router has 16 elements on the forwarding path---and easy to extend by adding additional elements, which we demonstrate with augmented configurations. On commodity PC hardware running Linux, the Click IP router can forward 64-byte packets at 73,000 packets per second, just 10\% slower than Linux alone.},
	urldate = {2017-01-26},
	booktitle = {Proceedings of the {Seventeenth} {ACM} {Symposium} on {Operating} {Systems} {Principles}},
	publisher = {ACM},
	author = {Morris, Robert and Kohler, Eddie and Jannotti, John and Kaashoek, M. Frans},
	year = {1999},
	pages = {217--231},
}

@article{mijumbi_network_2016,
	title = {Network {Function} {Virtualization}: {State}-of-the-{Art} and {Research} {Challenges}},
	volume = {18},
	issn = {1553-877X},
	shorttitle = {Network {Function} {Virtualization}},
	doi = {10.1109/COMST.2015.2477041},
	abstract = {Network function virtualization (NFV) has drawn significant attention from both industry and academia as an important shift in telecommunication service provisioning. By decoupling network functions (NFs) from the physical devices on which they run, NFV has the potential to lead to significant reductions in operating expenses (OPEX) and capital expenses (CAPEX) and facilitate the deployment of new services with increased agility and faster time-to-value. The NFV paradigm is still in its infancy and there is a large spectrum of opportunities for the research community to develop new architectures, systems and applications, and to evaluate alternatives and trade-offs in developing technologies for its successful deployment. In this paper, after discussing NFV and its relationship with complementary fields of software defined networking (SDN) and cloud computing, we survey the state-of-the-art in NFV, and identify promising research directions in this area. We also overview key NFV projects, standardization efforts, early implementations, use cases, and commercial products.},
	number = {1},
	journal = {IEEE Communications Surveys Tutorials},
	author = {Mijumbi, R. and Serrat, J. and Gorricho, J. L. and Bouten, N. and Turck, F. De and Boutaba, R.},
	year = {2016},
	keywords = {capital expenses, cloud computing, decoupling network functions, future Internet, Hardware, III-V semiconductor materials, Indium phosphide, network function virtualization, NFV paradigm, operating expenses, SDN, Servers, Software, software defined networking, standardization, telecommunication service provisioning, telecommunication services, Tutorials, Virtualization, virtual network functions},
	pages = {236--262},
}

@inproceedings{kohler_modular_2002,
	title = {Modular components for network address translation},
	isbn = {978-0-7803-7457-7},
	url = {http://ieeexplore.ieee.org/document/1019227/},
	doi = {10.1109/OPNARC.2002.1019227},
	urldate = {2017-11-29},
	publisher = {IEEE},
	author = {Kohler, E. and Morris, R. and Poletto, M.},
	year = {2002},
	pages = {39--50},
}

@misc{rfc768,
	series =	{Request for Comments},
	number =	768,
	howpublished =	{RFC 768},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC0768},
	url =		{https://rfc-editor.org/rfc/rfc768.txt},
	author=		{Postel, Jon},
  	title =		{{User Datagram Protocol}},
	pagetotal =	3,
	year =		1980,
	month =		aug,
	abstract =	{},
}

@inproceedings{laufer_climb:_2016,
	address = {New York, NY, USA},
	series = {{HotMIddlebox} '16},
	title = {{CliMB}: {Enabling} {Network} {Function} {Composition} with {Click} {Middleboxes}},
	isbn = {978-1-4503-4424-1},
	shorttitle = {{CliMB}},
	url = {http://doi.acm.org/2940147.2940152},
	doi = {2940147.2940152},
	abstract = {Click has significant advantages for middlebox development, including modularity, extensibility, and reprogrammability. Despite these features, Click still has no native TCP support and only uses nonblocking I/O, preventing its applicability to middleboxes that require access to L7 data and blocking I/O. We bridge this gap by introducing Click middleboxes (CliMB). CliMB provides a full-fledged modular TCP layer supporting congestion control, TCP options, both blocking and nonblocking I/O, as well as socket and zero-copy APIs to applications. As a result, any TCP network function may now be realized in Click. As proof of concept, we develop a zero-copy SOCKS proxy server using CliMB that shows up to 4x gains compared to an equivalent implementation using the Linux in-kernel network stack.},
	urldate = {2017-01-26},
	booktitle = {Proceedings of the 2016 {Workshop} on {Hot} {Topics} in {Middleboxes} and {Network} {Function} {Virtualization}},
	publisher = {ACM},
	author = {Laufer, Rafael and Gallo, Massimo and Perino, Diego and Nandugudi, Anandatirtha},
	year = {2016},
	keywords = {Click router, Network middleboxes, Programmable middleboxes},
	pages = {50--55},
}

@inproceedings{bondan_management_2014,
	title = {Management requirements for {ClickOS}-based {Network} {Function} {Virtualization}},
	doi = {10.1109/CNSM.2014.7014210},
	abstract = {Network Functions Virtualization (NFV) is a new approach to design, deploy, and manage network functions. In a recent past, such functions used to be implemented at hardware. This approach, besides effective, presents many disadvantages such as increased operational costs, difficulties to scale up or down the network, and deploy new functions. The rise of virtualization technologies, on the other side, provides new ways to rethink about network functions. Instead of specialized and expensive hardware, multiple network functions can share the same commodity hardware, thus contributing to a better utilization of resources. Besides its advantages, NFV is still on its early stages of employment. Important aspects are not yet being investigated by the research community. For example, to this date, the management requirements of NFV remain unclear. Therefore, the present paper addresses this subject, it presents a realistic network function request, which is used to identify management requirements in the context of a specific NFV enabler platform called ClickOS.},
	booktitle = {10th {International} {Conference} on {Network} and {Service} {Management} ({CNSM}) and {Workshop}},
	author = {Bondan, L. and Santos, C. R. P. d and Granville, L. Z.},
	month = nov,
	year = {2014},
	keywords = {Bridges, ClickOS-based network function virtualization, commodity hardware, computer network management, Context, Function Requests, Hardware, Internet, management requirements, Monitoring, multiple network functions, Network Functions Virtualization, Network Management, virtualisation, Virtualization, Web servers},
	pages = {447--450},
}

@inproceedings{csoma_escape:_2014,
	address = {New York, NY, USA},
	series = {{SIGCOMM} '14},
	title = {{ESCAPE}: {Extensible} {Service} {Chain} {Prototyping} {Environment} {Using} {Mininet}, {Click}, {NETCONF} and {POX}},
	isbn = {978-1-4503-2836-4},
	shorttitle = {{ESCAPE}},
	url = {http://doi.acm.org/10.1145/2619239.2631448},
	doi = {10.1145/2619239.2631448},
	abstract = {Mininet is a great prototyping tool which combines existing SDN-related software components (e.g., Open vSwitch, OpenFlow controllers, network namespaces, cgroups) into a framework, which can automatically set up and configure customized OpenFlow testbeds scaling up to hundreds of nodes. Standing on the shoulders of Mininet, we implement a similar prototyping system called ESCAPE, which can be used to develop and test various components of the service chaining architecture. Our framework incorporates Click for implementing Virtual Network Functions (VNF), NETCONF for managing Click-based VNFs and POX for taking care of traffic steering. We also add our extensible Orchestrator module, which can accommodate mapping algorithms from abstract service descriptions to deployed and running service chains.},
	booktitle = {Proceedings of the 2014 {ACM} {Conference} on {SIGCOMM}},
	publisher = {ACM},
	author = {Csoma, Attila and Sonkoly, Balázs and Csikor, Levente and Németh, Felicián and Gulyas, Andràs and Tavernier, Wouter and Sahhaf, Sahel},
	year = {2014},
	keywords = {click, mininet, NETCONF, prototyping, SDN, service chain},
	pages = {125--126},
}

@inproceedings{martins_clickos_2014,
	address = {Berkeley, CA, USA},
	series = {{NSDI}'14},
	title = {{ClickOS} and the {Art} of {Network} {Function} {Virtualization}},
	isbn = {978-1-931971-09-6},
	url = {http://dl.acm.org/citation.cfm?id=2616448.2616491},
	abstract = {Over the years middleboxes have become a fundamental part of today's networks. Despite their usefulness, they come with a number of problems, many of which arise from the fact that they are hardware-based: they are costly, difficult to manage, and their functionality is hard or impossible to change, to name a few. To address these issues, there is a recent trend towards network function virtualization (NFV), in essence proposing to turn these middleboxes into software-based, virtualized entities. Towards this goal we introduce ClickOS, a high-performance, virtualized software middlebox platform. ClickOS virtual machines are small (5MB), boot quickly (about 30 milliseconds), add little delay (45 microseconds) and over one hundred of them can be concurrently run while saturating a 10Gb pipe on a commodity server. We further implement a wide range of middleboxes including a firewall, a carrier-grade NAT and a load balancer and show that ClickOS can handle packets in the millions per second.},
	urldate = {2017-01-26},
	booktitle = {Proceedings of the 11th {USENIX} {Conference} on {Networked} {Systems} {Design} and {Implementation}},
	publisher = {USENIX Association},
	author = {Martins, Joao and Ahmed, Mohamed and Raiciu, Costin and Olteanu, Vladimir and Honda, Michio and Bifulco, Roberto and Huici, Felipe},
	year = {2014},
	pages = {459--473},
}

@inproceedings{ventre_performance_2016,
	title = {Performance evaluation and tuning of {Virtual} {Infrastructure} {Managers} for ({Micro}) {Virtual} {Network} {Functions}},
	isbn = {978-1-5090-0933-6},
	url = {http://ieeexplore.ieee.org/document/7919489/},
	doi = {10.1109/NFV-SDN.2016.7919489},
	urldate = {2017-11-29},
	publisher = {IEEE},
	author = {Ventre, Pier Luigi and Pisa, Claudio and Salsano, Stefano and Siracusano, Giuseppe and Schmidt, Florian and Lungaroni, Paolo and Blefari-Melazzi, Nicola},
	month = nov,
	year = {2016},
	pages = {141--147},
}

@inproceedings{rizzo_vale_2012,
	address = {New York, NY, USA},
	series = {{CoNEXT} '12},
	title = {{VALE}, a {Switched} {Ethernet} for {Virtual} {Machines}},
	isbn = {978-1-4503-1775-7},
	url = {http://doi.acm.org/10.1145/2413176.2413185},
	doi = {10.1145/2413176.2413185},
	abstract = {The growing popularity of virtual machines is pushing the demand for high performance communication between them. Past solutions have seen the use of hardware assistance, in the form of "PCI passthrough" (dedicating parts of physical NICs to each virtual machine) and even bouncing traffic through physical switches to handle data forwarding and replication. In this paper we show that, with a proper design, very high speed communication between virtual machines can be achieved completely in software. Our architecture, called VALE, implements a Virtual Local Ethernet that can be used by virtual machines, such as QEMU, KVM and others, as well as by regular processes. VALE achieves a throughput of over 17 million packets per second (Mpps) between host processes, and over 2 Mpps between QEMU instances, without any hardware assistance. VALE is available for both FreeBSD and Linux hosts, and is implemented as a kernel module that extends our recently proposed netmap framework, and uses similar techniques to achieve high packet rates.},
	urldate = {2017-01-26},
	booktitle = {Proceedings of the 8th {International} {Conference} on {Emerging} {Networking} {Experiments} and {Technologies}},
	publisher = {ACM},
	author = {Rizzo, Luigi and Lettieri, Giuseppe},
	year = {2012},
	keywords = {netmap, software switches, virtual machines},
	pages = {61--72},
}

@inproceedings{panda_netbricks:_2016,
	address = {Berkeley, CA, USA},
	series = {{OSDI}'16},
	title = {{NetBricks}: {Taking} the {V} out of {NFV}},
	isbn = {978-1-931971-33-1},
	shorttitle = {{NetBricks}},
	url = {http://dl.acm.org/citation.cfm?id=3026877.3026894},
	abstract = {The move from hardware middleboxes to software network functions, as advocated by NFV, has proven more challenging than expected. Developing new NFs remains a tedious process, requiring that developers repeatedly rediscover and reapply the same set of optimizations, while current techniques for providing isolation between NFs (using VMs or containers) incur high performance overheads. In this paper we describe NetBricks, a new NFV framework that tackles both these problems. For building NFs we take inspiration from modern data analytics frameworks (e.g., Spark and Dryad) and build a small set of customizable network processing elements. We also embrace type checking and safe runtimes to provide isolation in software, rather than rely on hardware isolation. NetBricks provides the same memory isolation as containers and VMs, without incurring the same performance penalties. To improve I/O efficiency, we introduce a novel technique called zero-copy software isolation.},
	booktitle = {Proceedings of the 12th {USENIX} {Conference} on {Operating} {Systems} {Design} and {Implementation}},
	publisher = {USENIX Association},
	author = {Panda, Aurojit and Han, Sangjin and Jang, Keon and Walls, Melvin and Ratnasamy, Sylvia and Shenker, Scott},
	year = {2016},
	pages = {203--216},
}

@article{etsi2014gs,
  title={GS NFV 003-V1. 2.1-Network Function Virtualisation (NFV): Terminology for Main concepts in NFV},
  author={ETSI, NFVISG},
  journal={publishing December},
  year={2014}
}

@misc{rfc3234,
	series =	{Request for Comments},
	number =	3234,
	howpublished =	{RFC 3234},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC3234},
	url =		{https://rfc-editor.org/rfc/rfc3234.txt},
    author =	{Scott W. Brim and Brian E. Carpenter},
	title =		{{Middleboxes: Taxonomy and Issues}},
	pagetotal =	27,
	year =		2002,
	month =		feb,
	abstract =	{This document is intended as part of an IETF discussion about "middleboxes" - defined as any intermediary box performing functions apart from normal, standard functions of an IP router on the data path between a source host and destination host. This document establishes a catalogue or taxonomy of middleboxes, cites previous and current IETF work concerning middleboxes, and attempts to identify some preliminary conclusions. It does not, however, claim to be definitive. This memo provides information for the Internet community.},
}

@misc{kohler_click:_2018,
	title = {click: {The} {Click} modular router: fast modular packet processing and analysis},
	shorttitle = {click},
	url = {https://github.com/kohler/click},
	author = {Kohler, Eddie},
	month = jun,
	year = {2018},
	note = {original-date: 2010-09-21T22:45:25Z}
}

@misc{noauthor_linux_2018,
	title = {Linux - {The} {Linux} {Foundation}},
	url = {https://www.linuxfoundation.org/projects/linux/},
	urldate = {2018-06-08},
	year = {2018},
}

@inproceedings{barbette_fast_2015,
	address = {Washington, DC, USA},
	series = {{ANCS} '15},
	title = {Fast {Userspace} {Packet} {Processing}},
	isbn = {978-1-4673-6632-8},
	url = {http://dl.acm.org/citation.cfm?id=2772722.2772727},
	abstract = {In recent years, we have witnessed the emergence of high speed packet I/O frameworks, bringing unprecedented network performance to userspace. Using the Click modular router, we first review and quantitatively compare several such packet I/O frameworks, showing their superiority to kernel-based forwarding. We then reconsider the issue of software packet processing, in the context of modern commodity hardware with hardware multi-queues, multi-core processors and non-uniform memory access. Through a combination of existing techniques and improvements of our own, we derive modern general principles for the design of software packet processors. Our implementation of a fast packet processor framework, integrating a faster Click with both Netmap and DPDK, exhibits up-to about 2.3x speed-up compared to other software implementations, when used as an IP router.},
	booktitle = {Proceedings of the {Eleventh} {ACM}/{IEEE} {Symposium} on {Architectures} for {Networking} and {Communications} {Systems}},
	publisher = {IEEE Computer Society},
	author = {Barbette, Tom and Soldani, Cyril and Mathy, Laurent},
	year = {2015},
	keywords = {click modular router, fast packet i/o, high-speed net- working, intel dpdk, multi-queue, netmap, network processing., numa, userspace i/o},
	pages = {5--16},
}

@article{rizzo_revisiting_2012,
	title = {Revisiting {Network} {I}/{O} {APIs}: {The} {Netmap} {Framework}},
	volume = {55},
	issn = {0001-0782},
	shorttitle = {Revisiting {Network} {I}/{O} {APIs}},
	url = {http://doi.acm.org/10.1145/2093548.2093565},
	doi = {10.1145/2093548.2093565},
	abstract = {It is possible to achieve huge performance improvements in the way packet processing is done on modern operating systems.},
	number = {3},
	journal = {Commun. ACM},
	author = {Rizzo, Luigi},
	month = mar,
	year = {2012},
	pages = {45--51},
}

@inproceedings{varis2012anatomy,
  title={Anatomy of a Linux bridge},
  author={Varis, Nuutti},
  booktitle={Proceedings of Seminar on Network Protocols in Operating Systems},
  pages={58},
  year={2012}
}

@article{pfaff_extending_2009,
	title = {Extending {Networking} into the {Virtualization} {Layer}},
	abstract = {The move to virtualization has created a new network access layer residing on hosts that connects the various VMs. Virtualized deployment environments impose re- quirements on networking for which traditional models are not well suited. They also provide advantages to the networking layer (such as software flexibility and well- defined end host events) that are not present in physical networks. To date, this new virtualization network layer has been largely built around standard Ethernet switching, but this technology neither satisfies these new requirements nor leverages the available advantages. We present Open vSwitch, a network switch specifically built for virtual environments. Open vSwitch differs from traditional approaches in that it exports an external interface for fine-grained control of configuration state and forwarding behavior. We describe how Open vSwitch can be used to tackle problems such as isolation in joint-tenant environments, mobility across subnets, and distributing configuration and visibility across hosts.},
	author = {Pfaff, Ben and Pettit, Justin and Koponen, Teemu and Amidon, Keith and Casado, Martin and Shenkerz, Scott},
	booktitle = {In: 8th ACM Workshop on Hot Topics inNetworks (HotNets-VIII).New YorkCity,NY(October 2009},
	month = jan,
	year = {2009},
}

@misc{noauthor_xen_nodate,
	title = {Xen {Networking} - {Xen}},
	url = {https://wiki.xen.org/wiki/Xen_Networking},
	urldate = {2018-06-17},
	year = {2018},
}

@article{Bosshart:2014:PPP:2656877.2656890,
	 author = {Bosshart, Pat and Daly, Dan and Gibb, Glen and Izzard, Martin and McKeown, Nick and Rexford, Jennifer and Schlesinger, Cole and Talayco, Dan and Vahdat, Amin and Varghese, George and Walker, David},
	 title = {P4: Programming Protocol-independent Packet Processors},
	 journal = {SIGCOMM Comput. Commun. Rev.},
	 issue_date = {July 2014},
	 volume = {44},
	 number = {3},
	 month = jul,
	 year = {2014},
	 issn = {0146-4833},
	 pages = {87--95},
	 numpages = {9},
	 url = {http://doi.acm.org/10.1145/2656877.2656890},
	 doi = {10.1145/2656877.2656890},
	 acmid = {2656890},
	 publisher = {ACM},
	 address = {New York, NY, USA},
	 keywords = {p4, protocol-independent, reconfigurability, sdn},
}
@article{Merkel:2014:DLL:2600239.2600241,
	 author = {Merkel, Dirk},
	 title = {Docker: Lightweight Linux Containers for Consistent Development and Deployment},
	 journal = {Linux J.},
	 issue_date = {March 2014},
	 volume = {2014},
	 number = {239},
	 month = mar,
	 year = {2014},
	 issn = {1075-3583},
	 articleno = {2},
	 url = {http://dl.acm.org/citation.cfm?id=2600239.2600241},
	 acmid = {2600241},
	 publisher = {Belltown Media},
	 address = {Houston, TX},
}

@article{day_osi_1983,
	title = {The {OSI} reference model},
	volume = {71},
	issn = {0018-9219},
	doi = {10.1109/PROC.1983.12775},
	abstract = {The early successes of computer networks in the mid-1970's made it apparent that to utilize the full potential of computer networks, international standards would be required. In 1977, the International Standards Organization (ISO) initiated work on Open Systems Interconnection (OSI) to address these requirements. This paper briefly describes the OSI Reference Model. The OSI Reference Model is the highest level of abstraction in the OSI scheme. The paper first describes the basic building blocks used to construct the network model. Then the particular seven-layer model used by OSI is briefly described, followed by a discussion of outstanding issues and future extensions for the model.},
	number = {12},
	journal = {Proceedings of the IEEE},
	author = {Day, J. D. and Zimmermann, H.},
	month = dec,
	year = {1983},
	keywords = {ARPANET, Communication standards, computer networks, ISO standards, Open systems, Packet switching, Protocols, Springs, Standards development, Standards organizations},
	pages = {1334--1340},
}

@misc{rfc1157,
	series =	{Request for Comments},
	number =	1157,
	howpublished =	{RFC 1157},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC1157},
	url =		{https://rfc-editor.org/rfc/rfc1157.txt},
    author =	{Mark Fedor and James R. Davin and Martin Lee Schoffstall and Dr. Jeff D. Case},
	title =		{{Simple Network Management Protocol (SNMP)}},
	pagetotal =	36,
	year =		1990,
	month =		may,
	abstract =	{This RFC is a re-release of RFC 1098, with a changed "Status of this Memo" section plus a few minor typographical corrections. This memo defines a simple protocol by which management information for a network element may be inspected or altered by logically remote users. {[}STANDARDS-TRACK{]}},
}

@article{noauthor_ieee_2016,
	title = {{IEEE} {Standard} for {Ethernet}},
	doi = {10.1109/IEEESTD.2016.7428776},
	abstract = {Ethernet local area network operation is specified for selected speeds of operation from 1 Mb/s to 100 Gb/s using a common media access control (MAC) specification and management information base (MIB). The Carrier Sense Multiple Access with Collision Detection (CSMA/CD) MAC protocol specifies shared medium (half duplex) operation, as well as full duplex operation. Speed specific Media Independent Interfaces (MIIs) allow use of selected Physical Layer devices (PHY) for operation over coaxial, twisted pair or fiber optic cables, or electrical backplanes. System considerations for multisegment shared access networks describe the use of Repeaterswhich are defined for operational speeds up to 1000 Mb/s. Local Area Network (LAN) operation is supported at all speeds. Other specified capabilities include: various PHY types for access networks, PHYs suitable for metropolitan area network applications, and the provision of power over selected twisted pair PHY types.},
	journal = {IEEE Std 802.3-2015 (Revision of IEEE Std 802.3-2012)},
	month = mar,
	year = {2016},
	keywords = {10BASE, 10GBASE, 10 Gigabit Ethernet, 40GBASE, 40 Gigabit Ethernet, 100BASE, 100GBASE, 100 Gigabit Ethernet, 1000BASE, attachment unit interface, AUI, Auto Negotiation, Backplane Ethernet, carrier sense multiple access, collision detection, CSMA-CD, data processing, DTE Power via the MDI, electrical backplane, EPON, Ethernet, Ethernet in the First Mile, Ethernet local area network operation, Ethernet passive optical network, Fast Ethernet, fiber optic cable, full duplex operation, Gigabit Ethernet, GMII, half duplex operation, IEEE 802.3 Standard, IEEE 802.3(TM), IEEE Standard, IEEE standards, IEEE Std 802.3-2012, IEEE Std 802.3TM-2015, information exchange, LAN operation, local area network, local area networks, MAC protocol, MAC specification, management, management information base, MDI, media access control specification, media independent interface, medium dependent interface, metropolitan area network application, metropolitan area networks, MIB, MII, multisegment shared access network, optical cables, Passive optical networks, PHY, physical coding sublayer, Physical Layer, physical layer device, physical medium attachment, PMA, Power over Ethernet, repeater, speed specific media independent interface, speed specific MII, Synchronization, Time measurement, twisted pair PHY type, type field, VLAN TAG, XGMII},
	pages = {1--4017},
}

@misc{rfc826,
	series =	{Request for Comments},
	number =	826,
	howpublished =	{RFC 826},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC0826},
	url =		{https://rfc-editor.org/rfc/rfc826.txt},
	author=		{Plummer, David C},
  	title =		{{An Ethernet Address Resolution Protocol: Or Converting Network Protocol Addresses to 48.bit Ethernet Address for Transmission on Ethernet Hardware}},
	pagetotal =	10,
	year =		1982,
	month =		nov,
	abstract =	{The purpose of this RFC is to present a method of Converting Protocol Addresses (e.g., IP addresses) to Local Network Addresses (e.g., Ethernet addresses). This is an issue of general concern in the ARPA Internet Community at this time. The method proposed here is presented for your consideration and comment. This is not the specification of an Internet Standard.},
}

@article{RASMUSSEN2008617,
	title = "Round robin scheduling – a survey",
	journal = "European Journal of Operational Research",
	volume = "188",
	number = "3",
	pages = "617 - 636",
	year = "2008",
	issn = "0377-2217",
	doi = "https://doi.org/10.1016/j.ejor.2007.05.046",
	url = "http://www.sciencedirect.com/science/article/pii/S0377221707005309",
	author = "Rasmus V. Rasmussen and Michael A. Trick",
	keywords = "Timetabling, Sports scheduling, Round robin tournaments, Home–away patterns"
}

@misc{rfc793,
	series =	{Request for Comments},
	number =	793,
	howpublished =	{RFC 793},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC0793},
	url =		{https://rfc-editor.org/rfc/rfc793.txt},
	author=		{Postel, Jon and others},
  	title =		{{Transmission Control Protocol}},
	pagetotal =	91,
	year =		1981,
	month =		sep,
	abstract =	{},
}

@inproceedings{zhang_opennetvm:_2016,
	address = {New York, NY, USA},
	series = {{HotMIddlebox} '16},
	title = {{OpenNetVM}: {A} {Platform} for {High} {Performance} {Network} {Service} {Chains}},
	isbn = {978-1-4503-4424-1},
	shorttitle = {{OpenNetVM}},
	url = {http://doi.acm.org/2940147.2940155},
	doi = {2940147.2940155},
	abstract = {Network middleboxes are growing in number and diversity. Middleboxes have been deployed widely to complement the basic end-to-end functionality provided by the Internet Protocol suite that depends only on the minimal functionality of a best-effort network layer. The move from purpose-built hardware middleboxes to software appliances running in virtual machines provides much needed deployment flexibility, but significant challenges remain. Just as Software Defined Networking (SDN) research and product development was greatly accelerated with the release of several open source SDN platforms, we believe that Network Function Virtualization (NFV) research can see similar growth with the development of a flexible platform that enables high performance NFV prototypes. Towards this end we have been building OpenNetVM, an efficient packet processing framework that greatly simplifies the development of network functions, as well as research into their management and optimization. OpenNetVM runs network functions in lightweight Docker containers, enabling fast startup and reducing memory overheads. The OpenNetVM platform manager provides load balancing, flexible flow management, and service name abstractions. OpenNetVM efficiently routes packets through dynamically created service chains, achieving throughputs of 10 Gbps even when traversing a chain of 6 NFs. In this paper we describe our architecture and evaluate its performance compared to existing NFV platforms.},
	urldate = {2018-07-02},
	booktitle = {Proceedings of the 2016 {Workshop} on {Hot} {Topics} in {Middleboxes} and {Network} {Function} {Virtualization}},
	publisher = {ACM},
	author = {Zhang, Wei and Liu, Guyue and Zhang, Wenhui and Shah, Neel and Lopreiato, Phillip and Todeschi, Gregoire and Ramakrishnan, K.K. and Wood, Timothy},
	year = {2016},
	keywords = {NFV, service chains},
	pages = {26--31},
}

@inproceedings{yurchenko_opennetvm:_2018,
	address = {New York, NY, USA},
	series = {{SOSR} '18},
	title = {{OpenNetVM}: {A} {Platform} for {High} {Performance} {NFV} {Service} {Chains}},
	isbn = {978-1-4503-5664-0},
	shorttitle = {{OpenNetVM}},
	url = {http://doi.acm.org/10.1145/3185467.3190786},
	doi = {10.1145/3185467.3190786},
	abstract = {Middleboxes in traditional networks relied on purpose-built hardware/software appliances to run data plane services, making it difficult for networks to evolve. OpenNetVM seeks to address this problem by offering a flexible Network Function Virtualization framework designed for rapid development and deployment of virtualized network functions. By efficiently chaining together a series of network functions, complex services can be created and adapted to meet changing needs. OpenNetVM provides an easy to use platform for NF development and research into network function management. This demo will present the improvements we have made to OpenNetVM since its initial open source release two years ago, including new functionality such as more efficient service chaining and a TCP stack to allow integrated deployments of middleboxes and end host applications.},
	urldate = {2018-07-02},
	booktitle = {Proceedings of the {Symposium} on {SDN} {Research}},
	publisher = {ACM},
	author = {Yurchenko, Mykola and Cody, Patrick and Coplan, Aaron and Kennedy, Riley and Wood, Timothy and Ramakrishnan, K. K.},
	year = {2018},
	keywords = {Function, Network, Virtualization},
	pages = {21:1--21:2},
}

@inproceedings{palkar_e2:_2015,
	address = {New York, NY, USA},
	series = {{SOSP} '15},
	title = {E2: {A} {Framework} for {NFV} {Applications}},
	isbn = {978-1-4503-3834-9},
	shorttitle = {E2},
	url = {http://doi.acm.org/10.1145/2815400.2815423},
	doi = {10.1145/2815400.2815423},
	abstract = {By moving network appliance functionality from proprietary hardware to software, Network Function Virtualization promises to bring the advantages of cloud computing to network packet processing. However, the evolution of cloud computing (particularly for data analytics) has greatly benefited from application-independent methods for scaling and placement that achieve high efficiency while relieving programmers of these burdens. NFV has no such general management solutions. In this paper, we present a scalable and application-agnostic scheduling framework for packet processing, and compare its performance to current approaches.},
	urldate = {2018-07-02},
	booktitle = {Proceedings of the 25th {Symposium} on {Operating} {Systems} {Principles}},
	publisher = {ACM},
	author = {Palkar, Shoumik and Lan, Chang and Han, Sangjin and Jang, Keon and Panda, Aurojit and Ratnasamy, Sylvia and Rizzo, Luigi and Shenker, Scott},
	year = {2015},
	pages = {121--136},
}

@article{kvm_article,
	author = {Kivity Qumranet, Avi and Kamay Qumranet, Yaniv and Laor Qumranet, Dor and Lublin Qumranet, Uri and Liguori, Anthony},
	year = {2007},
	month = {06},
	pages = {225--230},
	title = {KVM: The Linux virtual machine monitor},
	volume = {15},
	booktitle = {Proceedings Linux Symposium}
}

@misc{vsphere,
	title = {Server {Virtualization} {Software} {\textbar} {vSphere} {\textbar} {VMware}},
	url = {https://www.vmware.com/products/vsphere.html},
	urldate = {2018-07-02},
	year = {2018}
}

@misc{scooley_introducao_hyperV,
	title = {Introdução ao {Hyper}-{V} no {Windows} 10},
	url = {https://docs.microsoft.com/pt-br/virtualization/hyper-v-on-windows/about/},
	abstract = {Introdução ao Hyper-V, virtualização e tecnologias relacionadas.},
	language = {pt-br},
	urldate = {2018-07-02},
	author = {Cooley, Sarah},
	year = {2017}
}

@article{watson_virtualbox:_2008,
	title = {{VirtualBox}: {Bits} and {Bytes} {Masquerading} {As} {Machines}},
	volume = {2008},
	issn = {1075-3583},
	shorttitle = {{VirtualBox}},
	url = {http://dl.acm.org/citation.cfm?id=1344209.1344210},
	abstract = {Reconfiguring your existing system to do something new is painful. Using VirtualBox is not.},
	number = {166},
	urldate = {2018-07-02},
	journal = {Linux J.},
	author = {Watson, Jon},
	month = feb,
	year = {2008}
}

@inproceedings{barham_xen_2003,
	address = {New York, NY, USA},
	series = {{SOSP} '03},
	title = {Xen and the {Art} of {Virtualization}},
	isbn = {978-1-58113-757-6},
	url = {http://doi.acm.org/10.1145/945445.945462},
	doi = {10.1145/945445.945462},
	abstract = {Numerous systems have been designed which use virtualization to subdivide the ample resources of a modern computer. Some require specialized hardware, or cannot support commodity operating systems. Some target 100\% binary compatibility at the expense of performance. Others sacrifice security or functionality for speed. Few offer resource isolation or performance guarantees; most provide only best-effort provisioning, risking denial of service.This paper presents Xen, an x86 virtual machine monitor which allows multiple commodity operating systems to share conventional hardware in a safe and resource managed fashion, but without sacrificing either performance or functionality. This is achieved by providing an idealized virtual machine abstraction to which operating systems such as Linux, BSD and Windows XP, can be ported with minimal effort.Our design is targeted at hosting up to 100 virtual machine instances simultaneously on a modern server. The virtualization approach taken by Xen is extremely efficient: we allow operating systems such as Linux and Windows XP to be hosted simultaneously for a negligible performance overhead --- at most a few percent compared with the unvirtualized case. We considerably outperform competing commercial and freely available solutions in a range of microbenchmarks and system-wide tests.},
	urldate = {2018-07-02},
	booktitle = {Proceedings of the {Nineteenth} {ACM} {Symposium} on {Operating} {Systems} {Principles}},
	publisher = {ACM},
	author = {Barham, Paul and Dragovic, Boris and Fraser, Keir and Hand, Steven and Harris, Tim and Ho, Alex and Neugebauer, Rolf and Pratt, Ian and Warfield, Andrew},
	year = {2003},
	keywords = {hypervisors, paravirtualization, virtual machine monitors},
	pages = {164--177},
}

@misc{Popuri_200-,
	title = {A {Tour} of {Mini}-{OS} {Kernel}},
	url = {https://www.cs.uic.edu/~spopuri/minios.html},
	urldate = {2018-07-02},
	author = {Popuri, Satya},
	year = "200-"
}

@article{han_network_2015,
	title = {Network function virtualization: {Challenges} and opportunities for innovations},
	volume = {53},
	issn = {0163-6804},
	shorttitle = {Network function virtualization},
	doi = {10.1109/MCOM.2015.7045396},
	abstract = {Network function virtualization was recently proposed to improve the flexibility of network service provisioning and reduce the time to market of new services. By leveraging virtualization technologies and commercial off-the-shelf programmable hardware, such as general-purpose servers, storage, and switches, NFV decouples the software implementation of network functions from the underlying hardware. As an emerging technology, NFV brings several challenges to network operators, such as the guarantee of network performance for virtual appliances, their dynamic instantiation and migration, and their efficient placement. In this article, we provide a brief overview of NFV, explain its requirements and architectural framework, present several use cases, and discuss the challenges and future directions in this burgeoning research area.},
	number = {2},
	journal = {IEEE Communications Magazine},
	author = {Han, B. and Gopalakrishnan, V. and Ji, L. and Lee, S.},
	month = feb,
	year = {2015},
	keywords = {network function virtualization, Hardware, Servers, Virtualization, virtualisation, computer networks, commercial off-the-shelf programmable hardware, network performance, network service provisioning, software implementation, virtual appliances, Home appliances, Network security, Time to market, toRead},
	pages = {90--97},
}

@inproceedings{biederman2006multiple,
  title={Multiple instances of the global linux namespaces},
  author={Biederman, Eric W and Network, Linux},
  booktitle={Proceedings of the Linux Symposium},
  volume={1},
  pages={101--112},
  year={2006},
  organization={Citeseer}
}

@article{price2012opnfv,
  title={Opnfv: An open platform to accelerate nfv},
  author={Price, Christofer and Rivera, Sandra and others},
  journal={White Paper. A Linux Foundation Collaborative Project},
  year={2012},
  url = {https://networkbuilders.intel.com/docs/OPNFV_WhitePaper_Final.pdf}
}

@article{sefraoui_openstack:_2012,
	title = {{OpenStack}: {Toward} an {Open}-{Source} {Solution} for {Cloud} {Computing}},
	volume = {55},
	shorttitle = {{OpenStack}},
	doi = {10.5120/8738-2991},
	abstract = {Cloud computing is a quite new concept for which the resources are virtualized, dynamically extended and provided as a service on the Internet. In this paper, we present a comparative study between some of the IaaS (Infrastructure as a Service) commonly used to select the best suited one for deployment and research development in the field of cloud computing. The aim is to provide the computer industry with the opportunity to build a hosting architecture, massively scalable which is completely open source, while overcoming the constraints and the use of proprietary technologies. Then, we present the solution OpenStack retained by the comparative study. We discuss in detail its functional and architectural system. We finish by a discussion of the motivation of our choice of the IaaS solution. General Terms:},
	journal = {International Journal of Computer Applications},
	author = {Sefraoui, Omar and Aissaoui, Mohammed and Eleuldj, Mohsine},
	month = oct,
	year = {2012},
	pages = {38--42}
}

@misc{rfc791,
	series =	{Request for Comments},
	number =	791,
	howpublished =	{RFC 791},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC0791},
	url =		{https://rfc-editor.org/rfc/rfc791.txt},
	author={Postel, Jon and others},
  	title =		{{Internet Protocol}},
	pagetotal =	51,
	year =		1981,
	month =		sep,
	abstract =	{},
}

@misc{_irtf_nfvrg_2015,
	title = {{IRTF} {Network} {Function} {Virtualization} {Research} {Group} ({NFVRG})},
	url = {https://irtf.org/nfvrg},
	urldate = {2018-07-02},
	year = {2015}
}

@book{Stroustrup:2013:CPL:2543987,
 author = {Stroustrup, Bjarne},
 title = {The C++ Programming Language},
 year = {2013},
 isbn = {0321563840, 9780321563842},
 edition = {4th},
 publisher = {Addison-Wesley Professional},
} 

@misc{rfc1027,
	series =	{Request for Comments},
	number =	1027,
	howpublished =	{RFC 1027},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC1027},
	url =		{https://rfc-editor.org/rfc/rfc1027.txt},
    author=		{Smoot, Carl-Mitchell and Quarterman, John S},
	title =		{{Using ARP to implement transparent subnet gateways}},
	pagetotal =	8,
	year =		1987,
	month =		oct,
	abstract =	{This RFC describes the use of the Address Resolution Protocol (ARP) by subnet gateways to permit hosts on the connected subnets to communicate without being aware of the existence of subnets, using the technique of "Proxy ARP".},
}
